import {
  SchematicTestRunner,
  UnitTestTree,
} from '@angular-devkit/schematics/testing';

import path from 'path';

import { createTestApp, createTestLibrary } from '../../testing/scaffold';
import { readRequiredFile } from '../../utility/tree';

describe('lib-resources-module.schematic', () => {
  const collectionPath = path.resolve(__dirname, '../../collection.json');
  const defaultProjectName = 'my-lib';
  const schematicName = 'lib-resources-module';

  const resourcesModulePath = `/projects/${defaultProjectName}/src/lib/shared/${defaultProjectName}-resources.module.ts`;
  const defaultResourcesJsonPath = `/projects/${defaultProjectName}/src/assets/locales/resources_en_US.json`;

  const runner = new SchematicTestRunner('schematics', collectionPath);

  let tree: UnitTestTree;

  beforeEach(async () => {

    tree = await createTestLibrary(runner, {
      name: defaultProjectName
    });

    // Create a default resources file.
    tree.create(
      defaultResourcesJsonPath,
      JSON.stringify({
        foobar: {
          _description: 'A simple message.',
          message: 'Hello, world!',
        },
      })
    );
  });

  function runSchematic(project?: string): Promise<UnitTestTree> {
    return runner.runSchematicAsync(schematicName, {
      project
    }, tree).toPromise();
  }

  it('should generate a resources module', async () => {
    const updatedTree = await runSchematic();

    const moduleContents = readRequiredFile(updatedTree, resourcesModulePath);

    expect(moduleContents).toEqual(`/**
 * NOTICE: DO NOT MODIFY THIS FILE!
 * The contents of this file are automatically generated by
 * the 'ng g @skyux/i18n:lib-resources-module' schematic.
 * To update this file, simply rerun the command.
 */

import { Injectable, NgModule } from '@angular/core';
import {
  getStringForLocale,
  SkyAppLocaleInfo,
  SkyLibResourcesProvider,
  SKY_LIB_RESOURCES_PROVIDERS
} from '@skyux/i18n';

@Injectable()
export class MyLibResourcesProvider implements SkyLibResourcesProvider {
  private resources: any = {"EN-US":{"foobar":"Hello, world!"}};
  public getString(localeInfo: SkyAppLocaleInfo, name: string): string {
    return getStringForLocale(this.resources, localeInfo.locale, name);
  }
}

@NgModule({
  providers: [{
    provide: SKY_LIB_RESOURCES_PROVIDERS,
    useClass: MyLibResourcesProvider,
    multi: true
  }]
})
export class MyLibResourcesModule { }
`);
  });

  it('should create a default resources file if none exists', async () => {
    tree.delete(defaultResourcesJsonPath);

    const updatedTree = await runSchematic();

    expect(readRequiredFile(updatedTree, defaultResourcesJsonPath)).toEqual(
      `{
  "hello_world": {
    "_description": "A simple message.",
    "message": "Hello, world!"
  }
}
`
    );
  });

  it('should overwrite the local resources module if it exists', async () => {
    tree.create(resourcesModulePath, 'ORIGINAL CONTENT');

    const updatedTree = await runSchematic();

    expect(readRequiredFile(updatedTree, resourcesModulePath)).not.toContain(
      'ORIGINAL CONTENT'
    );
  });

  it('should handle invalid project name', async () => {
    await expectAsync(
      runSchematic('invalid-project')
    ).toBeRejectedWithError(
      'The "invalid-project" project is not defined in angular.json. Provide a valid project name.'
    );
  });

  it('should add `@skyux/i18n` as a peer dependency', async () => {
    const packageJsonPath = `projects/${defaultProjectName}/package.json`;

    // Overwrite package.json.
    tree.overwrite(packageJsonPath, '{}');

    const updatedTree = await runSchematic();

    const packageJsonContents = JSON.parse(
      readRequiredFile(updatedTree, packageJsonPath)
    );

    expect(packageJsonContents.peerDependencies['@skyux/i18n']).toEqual(
      '^5.0.0-beta.0'
    );
  });

  it('should abort for application projects', async () => {
    const app = await createTestApp(runner, {
      defaultProjectName: 'foo-app'
    });

    await runner.runSchematicAsync(schematicName, {
      project: 'foo-app'
    }, app).toPromise();

    expect(app.exists(resourcesModulePath)).toBeFalse();
  });

  // it('should handle missing package.json file', async () => {
  //   app.delete(PACKAGE_JSON_FILE);

  //   await expectAsync(
  //     runner
  //       .runSchematicAsync(
  //         'lib-resources-module',
  //         { project: PROJECT_NAME },
  //         app
  //       )
  //       .toPromise()
  //   ).toBeRejectedWithError(
  //     `Cannot read "${PACKAGE_JSON_FILE}" because it does not exist.`
  //   );
  // });

  // it("should throw an error if angular.json doesn't exist", async () => {
  //   tree.delete('angular.json');

  //   await expectAsync(
  //     runSchematic()
  //   ).toBeRejectedWithError('Not an Angular CLI workspace.');
  // });
});
